from fastapi import FastAPI, HTTPException, Response
from random import randrange
from typing import Optional
from fastapi.params import Body
from pydantic import BaseModel
from fastapi import status

app = FastAPI()


def findPost(id):
    for p in my_post:
        if p['id'] == id:
            return p

def findPost2(id):
    for i,p in enumerate(my_post):
         if p['id'] == id:
            return i

class Post(BaseModel):
    title: str
    content: str
    published: bool = True
    rating: Optional[int] = None


my_post = [{"title": "demo title", "content": "demo content", "id": 101}]


@app.get("/")
def welcome():
    return {"message": "Welcome to FastAPI...."}


@app.get("/dummy")
def dummyData():
    return {"data": my_post}


@app.post("/create")
def postData(payload: dict = Body(...)):
    print(payload)
    return {"message": f"title {payload['title']} content: {payload['content']}"}
    # return {"message":"user added"}


@app.post("/adduser", status_code=status.HTTP_201_CREATED)
def postDataToArray(newPost: Post):
    post_dict = newPost.dict()
    post_dict['id'] = randrange(0, 1000000)
    my_post.append(post_dict)
    print(newPost)

    return {"message": post_dict}

@app.get("/loaduser/{id}")
def loadUser(id:int):
    post=findPost(id)
    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="Given ID not found")
    else:
       return {"data":post}


@app.get("/loadusernew/{id}")
def loadUser(id:int,response:Response):
    post=findPost(id)
    if not post:
        response.status_code=status.HTTP_404_NOT_FOUND
        print(post)
        return{"message":"ID not found"}
    else:
       return {"data":post}

@app.delete("/deletepost/{id}",status_code=status.HTTP_204_NO_CONTENT)
def deleteUserById(id:int):
    index=findPost2(id)
    if index == None:
         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="Given ID not found")
    my_post.pop(index)
    return{"Post Deleted":index}

@app.put("/updatepost/{id}")
def updateUserById(id:int,post:Post):
    index=findPost2(id)
    if index == None:
         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="Given ID not found")
    post_dict=post.model_dump()
    post_dict['id']=id
    my_post[index]=post_dict
    return{"Post updated":post_dict}
